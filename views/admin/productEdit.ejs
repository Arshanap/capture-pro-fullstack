<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="utf-8">
        <title>Capture Pro</title>
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta property="og:title" content="">
        <meta property="og:type" content="">
        <meta property="og:url" content="">
        <meta property="og:image" content="">
        <!-- Favicon -->
        <link rel="shortcut icon" type="image/x-icon" href="/assets/imgs/theme/favicon.svg">
        <link rel="stylesheet" href="/assets/imgs/theme/favicon.svg">
        <!-- Template CSS -->
        <link href="/assets/css/main.css" rel="stylesheet" type="text/css" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    </head>
    <style>
        .image-cropper {
            position: relative;
            width: 300px;
            height: 200px;
            margin-bottom: 20px;
            display: none;
        }
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }
        .thumbnail {
            margin-right: 10px;
        }
        .image-container {
            position: relative;
            display: inline-block;
        }
        .delete-overlay {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 0, 0, 0.3);
            text-align: center;
            color: white;
            font-weight: bold;
            padding-top: 40%;
            text-shadow: 1px 1px 2px black;
        }
        .marked-for-deletion .delete-overlay {
            display: block;
        }
        .marked-for-deletion img {
            opacity: 0.7;
        }
    </style>
    
    <body>
        <div class="screen-overlay"></div>
        <aside class="navbar-aside" id="offcanvas_aside">
            <div class="aside-top">
                <a href="" class="brand-wrap">
                    <img src="/assets/imgs/captureLogo.png" class="logo" alt="Evara Dashboard" >
                </a>
                <div>
                    <!-- <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button> -->
                </div>
            </div>
            <nav>
                <ul class="menu-aside">
                    <li class="menu-item">
                        <a class="menu-link" href="/admin/dashboard"> <i class="icon material-icons md-home"></i>
                            <span class="text">Dashboard</span>
                        </a>
                    </li>
                    <li class="menu-item active">
                        <a class="menu-link" href=""> <i class="icon material-icons md-shopping_bag"></i>
                            <span class="text">Products</span>
                        </a>
                    
                    </li>
                    <li class="menu-item ">
                        <a class="menu-link" href="/admin/order"> <i class="icon material-icons md-shopping_cart"></i>
                            <span class="text">Order list</span>
                        </a>
      
                    </li>
                    <li class="menu-item ">
                         
                        <a href="/admin/users" class="menu-link" style="right: -10px; position: relative; color: #292f46;">   
                            <i class="icon material-icons md-person"></i>  users</a>
                    </li>
                    <li class="menu-item ">
                        <a class="menu-link" href="/admin/coupen"> <i class="icon material-icons md-add_box"></i>
                            <span class="text">Coupons</span>
                        </a>
                    </li>
                    <li class="menu-item active"></li>
                        <a class="menu-link" href="/admin/category"> 
                            <i class="icon material-icons md-monetization_on "></i>
                            <span class="text">Category</span>
                        </a>
                    </li>
                    <li class="menu-item ">
                        <a class="menu-link" href=""> <i class="fas fa-bullhorn" style="font-size: 117%; color: #adadad; right:2%"></i>
                            <span class="text" style="left:7%; position:  relative;">banners</span>
                        </a>
                     
                    </li>
                   
                    <li class="menu-item">
                        <a class="menu-link" href="/admin/salesReport"> <i class="icon material-icons md-comment"></i>
                            <span class="text">Sales Report</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a class="menu-link" href=""> <i class="icon material-icons md-stars"></i>
                            <span class="text">Payments</span> </a>
                    </li>
                  
                </ul>
                <hr>
                <ul class="menu-aside">
                    <li class="menu-item ">
                        <a class="menu-link" href=""> <i class="icon material-icons md-settings"></i>
                            <span class="text">Settings</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a  style="left: 5%; font-size: 10px;" class="menu-link" href="/admin/Logout"> <i class="fa-solid fa-right-from-bracket">  Logout </i> 
                         
                        </a >
                    </li>
                </ul>
                <br>
                <br>
            </nav>
        </aside>
        <main class="main-wrap">
            <header class="main-header navbar">
                <div class="col-search">
                    
                </div>
                <!-- <div class="col-nav">
                    <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
                    <ul class="nav">
                        
                </div> -->
            </header>
            
                <!-- Edit Product Modal -->
                <!-- <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true"> -->
                    <div class="modal-dialog">
                      <div class="modal-content">
                        <form id="editProductForm" method="post" action="/admin/productedit?id=<%= product._id %>" enctype="multipart/form-data" >
                            <div class="modal-header">
                                <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                                <a href="/admin/products"><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></a>
                            </div>
                        
                            <div class="modal-body">
                                <!-- Form fields populated by JavaScript -->
                                <div class="mb-3">
                                    <label for="productName" class="form-label">Product Name</label>
                                    <input type="text" value="<%= product?.productName || '' %>" class="form-control" id="productName" name="productName">
                                    <div id="productName-error" class="error-message text-danger"></div>
                                </div>
                        
                                <div class="mb-3">
                                    <label for="productCategory" class="form-label">Category</label>
                                    <select class="form-control" id="productCategory" name="category">
                                        <% categories.forEach(function(category) { %>
                                            <option value="<%= category._id %>" <%= product?.category?._id.toString() === category._id.toString() ? 'selected' : '' %>> <%= category.name %> </option>
                                        <% }) %>
                                    </select>
                                    <div id="productCategory-error" class="error-message text-danger"></div>
                                </div>
                        
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="regularPrice" class="form-label">Regular Price</label>
                                        <input type="number" value="<%= product?.regularPrice || '' %>" class="form-control" id="regularPrice" name="regularPrice">
                                        <div id="regularPrice-error" class="error-message text-danger"></div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="salePrice" class="form-label">Sale Price</label>
                                        <input type="number" value="<%= product?.salePrice || '' %>" class="form-control" id="salePrice" name="salePrice">
                                        <div id="salePrice-error" class="error-message text-danger"></div>
                                    </div>
                                </div>
                        
                                <div class="mb-3">
                                    <label for="description" class="form-label">Full Description</label>
                                    <textarea class="form-control" id="description" name="description" rows="4"><%= product?.description || '' %></textarea>
                                    <div id="description-error" class="error-message text-danger"></div>
                                </div>
                        
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="count" class="form-label">Quantity</label>
                                        <input type="number" class="form-control" value="<%= product?.count || '' %>" id="count" name="count">
                                        <div id="quantity-error" class="error-message text-danger"></div>
                                    </div>
                                </div>
                        
                                <!-- Image Upload and Cropping-->
                                <div class="row" id="imageRow">
                                    <% if (product?.productImage && product.productImage.length > 0) { %>
                                        <% product.productImage.forEach(function(image, i) { %>
                                            <div class="card-body align-items-center image-container" style="margin-bottom: 20px; position: relative;" id="image-container-<%= i %>">
                                                <i onclick="deleteSingleImage('<%= image %>', '<%= product._id %>', '<%= i %>')" style="position: absolute; top: 10px; right: 10px; cursor: pointer; z-index: 10;" class="fa-solid fa-times"></i>
                                                <div class="delete-overlay">Marked for deletion</div>
                                                <img src="/uploads/re-image/<%= image %>" alt="product image <%= i %>" id="imgView<%= i %>" style="max-width: 200px; display: block; margin: 0 auto;">
                                                <input type="hidden" name="deletedImages[]" id="deletedImage<%= i %>" value="">
                                            </div>
                                        <% }) %>
                                    <% } %>

                                    <!-- Dynamic Image Inputs -->
                                    <% const currentImageCount = product.productImage.length; %>
                                    <% for (let j = currentImageCount; j < 4; j++) { %>
                                        <div class="card-body align-items-center" style="margin-bottom: 20px;" id="input-container-<%= j %>" style="display: none;">
                                            <img src="" alt="" id="imgView<%= j+1 %>" style="max-width: 200px;">
                                            <input class="form-control" type="file" name="image" id="input<%= j+1 %>" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, '<%= j+1 %>')">
                                            <div id="images<%= j+1 %>-error" class="error-message text-danger"></div>
                                        </div>
                                        <div id="cropperContainer<%= j+1 %>" class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg<%= j+1 %>" alt="">
                                            <button type="button" id="saveButton<%= j+1 %>" class="btn-sm btn-primary">Save</button>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                            <div id="images-error" class="error-message text-danger"></div>

                        
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" onclick="return validateForm()" class="btn btn-primary" id="saveChangesBtn">Save changes</button>
                            </div>
                        </form>
                        
                          
                      </div>
                    </div>
                  </div>


                <!-- edit -->
                <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
                <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
                
<script>


function validateForm() {
    let isValid = true;

    const hasSpecialCharacters = (input) => /[!@#$%^&*(),.?":{}|<>]/g.test(input);

    const productName = document.getElementById('productName').value;
    if (productName === '' || hasSpecialCharacters(productName)) {
        document.getElementById('productName-error').innerText = 'Product name is required and cannot contain special characters.';
        isValid = false;
    } else {
        document.getElementById('productName-error').innerText = '';
    }

    // Category Validation
    const productCategory = document.getElementById('productCategory').value;
    if (productCategory === '') {
        document.getElementById('productCategory-error').innerText = 'Category is required.';
        isValid = false;
    } else {
        document.getElementById('productCategory-error').innerText = '';
    }

    // Regular Price Validation
    const regularPrice = document.getElementById('regularPrice').value;
    if (regularPrice === '' || parseFloat(regularPrice) <= 0) {
        document.getElementById('regularPrice-error').innerText = 'Regular price is required and must be greater than 0.';
        isValid = false;
    } else {
        document.getElementById('regularPrice-error').innerText = '';
    }

    // Sale Price Validation
    const salePrice = document.getElementById('salePrice').value;
    if (salePrice === '' || parseFloat(salePrice) <= 0) {
        document.getElementById('salePrice-error').innerText = 'Sale price is required and must be greater than 0.';
        isValid = false;
    } else if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
        document.getElementById('salePrice-error').innerText = 'Sale price must be less than regular price.';
        isValid = false;
    } else {
        document.getElementById('salePrice-error').innerText = '';
    }

    // Quantity Validation
    const quantity = document.getElementById('count').value;
    if (quantity === '' || isNaN(quantity) || parseInt(quantity) <= 0) {
        document.getElementById('quantity-error').innerText = 'Please enter a valid quantity greater than 0.';
        isValid = false;
    } else {
        document.getElementById('quantity-error').innerText = '';
    }

    // Full Description Validation
    const productDescription = document.getElementById('description').value;
    if (productDescription === '' || hasSpecialCharacters(productDescription)) {
        document.getElementById('description-error').innerText = 'Description is required and cannot contain special characters.';
        isValid = false;
    } else {
        document.getElementById('description-error').innerText = '';
    }

    // Image Validation
    const existingImages = document.querySelectorAll('.image-container').length;
    const newImageInputs = document.querySelectorAll('input[type="file"]');
    let newImagesCount = 0;

    // Count valid new images being uploaded
    newImageInputs.forEach(input => {
        if (input.files && input.files[0]) {
            newImagesCount++;
        }
    });

    const totalImages = existingImages + newImagesCount;
    
    if (totalImages < 3) {
        document.getElementById('images-error').innerText = 'Please ensure there are at least 3 images for the product.';
        return isValid = false;
    } else {
        document.getElementById('images-error').innerText = '';
    }

    // File type validation for new uploads
    newImageInputs.forEach((input, index) => {
        const file = input.files[0];
        if (file && !['image/png', 'image/jpeg', 'image/jpg'].includes(file.type)) {
            document.getElementById(`images${index + 1}-error`).innerText = 'Only PNG, JPEG, and JPG formats are allowed.';
            isValid = false;
        } else {
            document.getElementById(`images${index + 1}-error`).innerText = '';
        }
    });

    return isValid;
}


</script>
                             
                
<script>
function viewImage(event, index) {
    let input = event.target;
    let reader = new FileReader();
    reader.onload = function () {
        let dataURL = reader.result;
        let image = document.getElementById('imgView' + index);
        image.src = dataURL;

        // If a cropper exists for this index, destroy it first
        if (croppers[index]) {
            croppers[index].destroy();
        }

        // Initialize Cropper.js
        croppers[index] = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            background: false,
            autoCropArea: 1,
            zoomable: true,
        });

        // Display cropping container
        document.getElementById('cropperContainer' + index).style.display = 'block';

        // Handle the save button click for cropping
        let saveButton = document.querySelector('#saveButton' + index);
        saveButton.addEventListener('click', async function () {
            let croppedCanvas = croppers[index].getCroppedCanvas();
            let croppedImage = document.getElementById('croppedImg' + index);
            croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

            let timestamp = new Date().getTime();
            let fileName = `cropped-img-${timestamp}-${index}.png`;

            // Convert the cropped canvas to a Blob and replace the original file
            await croppedCanvas.toBlob(blob => {
                let imgFile = new File([blob], fileName, { type: blob.type });
                let fileList = new DataTransfer();
                fileList.items.add(imgFile);
                document.getElementById('input' + index).files = fileList.files;
            });

            // Destroy the cropper after saving
            croppers[index].destroy();
            croppers[index] = null;
        });
    };
    reader.readAsDataURL(input.files[0]);
}

function viewImage1(event) {
           document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
       }


       function viewImage2(event) {
           document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
       }


       function viewImage3(event) {
           document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
       }


       function viewImage4(event) {
           document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
       }




       function viewImage(event, index) {
           let input = event.target;
           let reader = new FileReader();
           reader.onload = function () {
               let dataURL = reader.result;
               let image = document.getElementById('imgView' + index);
               image.src = dataURL;
               let cropper = new Cropper(image, {
                   aspectRatio: 1,
                   viewMode: 1,
                   guides: true,
                   background: false,
                   autoCropArea: 1,
                   zoomable: true
               });
               let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
               cropperContainer.style.display = 'block';
               let saveButton = document.querySelector('#saveButton' + index);
               saveButton.addEventListener('click', async function () {
                   let croppedCanvas = cropper.getCroppedCanvas();
                   let croppedImage = document.getElementById("croppedImg" + index);
                   croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                   let timestamp = new Date().getTime();
                   let fileName = `cropped-img-${timestamp}-${index}.png`;
                   await croppedCanvas.toBlob(blob => {
                       let input = document.getElementById('input' + index);
                       let imgFile = new File([blob], fileName, blob)
                       const fileList = new DataTransfer();
                       fileList.items.add(imgFile);
                       input.files = fileList.files
                   });
                   cropperContainer.style.display = 'none';
               });
           };
           reader.readAsDataURL(input.files[0]);
       }


    
   document.getElementById("imageInput").addEventListener("change", handleFileSelect);


       function handleFileSelect(event) {
        const selectedImages = [];
           const addedImagesContainer = document.getElementById("addedImagesContainer");
           addedImagesContainer.innerHTML = "";
           const files = event.target.files;
           for (let i = 0; i < files.length; i++) {
               const file = files[i];
               selectedImages.push(file);
               const thumbnail = document.createElement("div");
               thumbnail.classList.add("thumbnail");
               const img = document.createElement("img");
               img.src = URL.createObjectURL(file);
               img.alt = "thumbnail";
               img.style.width = "50px";
               img.style.height = "auto";
               const removeIcon = document.createElement("span");
               removeIcon.classList.add("remove-icon");
               removeIcon.innerHTML = "&times;";
               removeIcon.addEventListener("click", function () {
                   const index = selectedImages.indexOf(file);
                   if (index !== -1) {
                       selectedImages.splice(index, 1);
                   }
                   thumbnail.remove();
               });
               thumbnail.appendChild(img);
               thumbnail.appendChild(removeIcon);
               addedImagesContainer.appendChild(thumbnail);
           }
       };

       function markImageForDeletion(imageName, index) {
            if (confirm('Are you sure you want to mark this image for deletion?')) {
                const container = document.getElementById(`image-container-${index}`);
                const overlay = document.getElementById(`overlay-${index}`);
                
                if (!deletedImagesList.includes(imageName)) {
                    deletedImagesList.push(imageName);
                    container.classList.add('marked-for-deletion');
                    document.getElementById(`deletedImage${index}`).value = imageName;
                } else {
                    deletedImagesList = deletedImagesList.filter(img => img !== imageName);
                    container.classList.remove('marked-for-deletion');
                    document.getElementById(`deletedImage${index}`).value = '';
                }
            }
        }

        // Update the form submission
        document.getElementById('editProductForm').onsubmit = function(e) {
            e.preventDefault(); // Prevent the default form submission
            
            // Create FormData object
            const formData = new FormData(this);
            
            // Add the deleted images list to the form data
            if (deletedImagesList.length > 0) {
                deletedImagesList.forEach(img => {
                    formData.append('deletedImages[]', img);
                });
            }
            
            // Submit the form with AJAX
            $.ajax({
                url: this.action,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        window.location.href = '/admin/products';
                    } else {
                        alert('Error updating product: ' + response.error);
                    }
                },
                error: function(xhr, status, error) {
                    alert('Error updating product: ' + error);
                }
            });
            
            return false;
        };
</script>
                             
                
<script>
function updateImageInputs() {
    const currentImageCount = document.querySelectorAll('.image-container').length;
    const maxImages = 4;
    for (let i = 0; i < maxImages; i++) {
        const inputContainer = document.getElementById(`input-container-${i}`);
        if (inputContainer) {
            if (i < currentImageCount) {
                inputContainer.style.display = 'none';
            } else {
                inputContainer.style.display = 'block';
            }
        }
    }
}

function deleteSingleImage(imageId, productId, index) {
    $.ajax({
        url: "/admin/deleteSingleImage",
        method: "post",
        data: { imageNameToServer: imageId, productIdToServer: productId },
        success: function(response) {
            if (response.success === true) {
                alert("ethi ethi ethi ethi")
                document.getElementById(`image-container-${index}`).remove();
                updateImageInputs();
                // Reload the page after successful deletion
                location.reload();
            }
        },
        error: function(xhr, status, error) {
            alert('Error deleting image: ' + error);
        }
    });
}

// Call this function on page load to set the initial state
updateImageInputs();
</script>
                             
                
<script>
    let deletedImagesList = [];

    function markImageForDeletion(imageName, index) {
        if (confirm('Are you sure you want to mark this image for deletion?')) {
            const container = document.getElementById(`image-container-${index}`);
            const overlay = document.getElementById(`overlay-${index}`);
            
            if (!deletedImagesList.includes(imageName)) {
                deletedImagesList.push(imageName);
                container.classList.add('marked-for-deletion');
                document.getElementById(`deletedImage${index}`).value = imageName;
            } else {
                deletedImagesList = deletedImagesList1.filter(img => img !== imageName);
                container.classList.remove('marked-for-deletion');
                document.getElementById(`deletedImage${index}`).value = '';
            }
        }
    }

    document.getElementById('editProductForm').onsubmit = function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        if (deletedImagesList.length > 0) {
            deletedImagesList.forEach(img => {
                formData.append('deletedImages[]', img);
            });
        }
        
        $.ajax({
            url: this.action,
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    window.location.href = '/admin/products';
                } else {
                    alert('Error updating product: ' + response.error);
                }
            },
            error: function(xhr, status, error) {
                alert('Error updating product: ' + error);
            }
        });
        
        return false;
    };
</script>

<script>
function updateImageInputs() {
    const currentImageCount = document.querySelectorAll('.image-container').length;
    const maxImages = 4;
    for (let i = 0; i < maxImages; i++) {
        const inputContainer = document.getElementById(`input-container-${i}`);
        if (inputContainer) {
            if (i < currentImageCount) {
                inputContainer.style.display = 'none';
            } else {
                inputContainer.style.display = 'block';
            }
        }
    }
}

function deleteSingleImage(imageId, productId, index) {
    $.ajax({
        url: "/admin/deleteSingleImage",
        method: "post",
        data: { imageNameToServer: imageId, productIdToServer: productId },
        success: function(response) {
            if (response.status === true) {
                // Remove the specific image container and update inputs
                document.getElementById(`image-container-${index}`).remove();
                updateImageInputs();
                // Reload the page after successful deletion
                location.reload();
            }
        },
        error: function(xhr, status, error) {
            alert('Error deleting image: ' + error);
        }
    });
}

// Call this function on page load to set the initial state
updateImageInputs();
</script>
                                          

</body>
</html>